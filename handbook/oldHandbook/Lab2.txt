Лабораторная работа №2
ход работы

ПримеРы

ТЕория

Примечание

Дополнительное 

задание*

Интерфейс
приложения
Вопросы 

для защиты

Рисунок 1.1 Обозначения разделов

Лабораторная работа №2
сОДЕРЖАНИЕ
Задание
Дополнительное 

задание*

................................................................................2

Шаг 1. Создание
проекта

................................................................................5

Основные элементы
Windows Forms

...............................................................................8

................................................................................3

Шаг 2. Создание формы .............................................................................11
Шаг 3. Добавление
классов

............................................................................19

Шаг 4. Реализация
добавления данных в
таблицу

............................................................................21

Шаг 5. Реализация
фильтрации (поиска)
данных

............................................................................21

Лабораторная работа №2
сОДЕРЖАНИЕ
Шаг 6. Сериализация,
десериализация классов. .....................................................................27
Сохранение в XML
Дополнительная
информация

.....................................................................36

Стилизация интерфейса

.....................................................................36

Форматирование данных

.....................................................................42

Интерфейс приложения

.....................................................................44

Лабораторная работа №2
Задание

Реализовать оконное приложение (Windows Forms).
Оконное приложение должно позволять создавать объекты,
отображать список созданных объектов в табличной форме и
выполнять поиск и удаление.
Реализовать сериализацию и десериализацию классов в
приложении.
Сохранить наследование в классах (как в лабораторной работе
№1)
Сделать возможность добавления нового объекта для каждого
класса
Интерфейс приложения должен быть дополнен кнопками для
сохранения и загрузки классов из XML файлов.
Операции сохранения и загрузки XML файлов должны быть
выполнены с использованием методов async и await.
Поиск данных должен выполняться для каждого класса отдельно
Реализовать удаление данных (сохраняя верный порядок строк)
Варианты заданий к лабораторной работе №2
В

соответствии с вариантом лабораторной работы № 1.

2

Лабораторная работа №2
Дополнительное задание*

Возможность изменения темы интерфейса 
Добавить выбор цветовой схемы (светлая/тёмная тема). 
Использовать Flat стиль кнопок для современного вида.
Улучшенный поиск 
Реализовать фильтрацию данных в DataGridView в
реальном времени (например, при вводе текста в TextBox). 
Поиск с подсветкой найденных результатов.
Контекстное меню 
Добавить правый клик на строку в DataGridView, чтобы
появлялось меню с опциями (Редактировать / Удалить).
Автосохранение 
Автоматически сохранять данные в XML при закрытии
программы. 
Загружать последние данные при запуске.
Drag & Drop XML 
Сделать так, чтобы XML-файлы можно было просто
перетаскивать в окно приложения для загрузки.

3

Лабораторная работа №2
Дополнительное задание*

Экспорт в другие форматы 
Позволить сохранять данные не только в XML, но и в JSON.
Статистика 
Добавить внизу статус-бар с инфо: "Объектов в базе: X".
Логирование ошибок 
Если что-то пошло не так (ошибки при загрузке XML),
выводить понятное сообщение пользователю.
Генерация тестовых данных

Добавить кнопку "Сгенерировать тестовые данные" для
удобства тестирования.
Горячие клавиши

Например, Ctrl + S для сохранения, Ctrl + O для загрузки,
Esc для очистки формы.

4

Лабораторная работа №2
Шаг 1. Создание проекта
"Создать проект"
"Windows forms(Майкрософт)" (Рисунок 1.2)

Рисунок 1.2 Обозначения разделов

5

Лабораторная работа №2
Шаг 1. Создание проекта
Указываете название формы (содержащее номер лабораторной работы)
Выбираете последнюю версию платформы из доступных (в примере
.NET 8.0) (Рисунок 1.3)

Рисунок 1.3 Настройки проекта

6

Лабораторная работа №2
Шаг 1. Создание проекта
Перед вами откроется проект с формой по умолчанию
Слева будет “Панель элементов” (если ее нет перейти в “Вид” →
“Панель элементов” / Ctrl + Alt + X) (Рисунок 1.4)

Рисунок 1.4 Окно проекта

7

Лабораторная работа №2
Основные элементы Windows Forms
Панель элементов содержит множество элементов для работы с формами.
Можно выделить наиболее часто используемые:
Form 
Основное окно приложения. Служит контейнером для других элементов управления,
предоставляет базовую функциональность для создания пользовательского
интерфейса (размещение, масштабирование, обработка событий формы).
Button 
Кнопка, по нажатию на которую происходит выполнение заданного кода.
Используется для инициирования действий (например, отправка данных,
переход на другую форму).
Label 
Элемент для отображения текста. Предназначен для вывода информационных
сообщений, описания других элементов и инструкций. Не поддерживает ввод
данных.
TextBox 
Поле для ввода и отображения однострочного текста. Используется для сбора
пользовательского ввода, поиска, ввода паролей (с установкой PasswordChar) и т.д.
RichTextBox

Расширенная версия TextBox, позволяющая форматировать текст (изменять шрифты,
цвета, стили). Полезна для редактирования многострочного форматированного текста.
CheckBox 
Флажок, позволяющий выбирать или снимать выбор (логическое значение true/false).
Применяется в формах для подтверждения, включения настроек и т.п.

8

Лабораторная работа №2
Основные элементы Windows Forms
ListBox 
Список, позволяющий отображать набор элементов, из которых пользователь может
выбрать один или несколько. Простой способ представления данных в виде списка.
ComboBox 
Комбинированный элемент, который сочетает в себе поле для ввода и выпадающий
список. Удобен для выбора одного значения из набора, позволяя пользователю как
выбрать из списка, так и ввести значение вручную.
ListView 
Многофункциональный список с поддержкой различных видов отображения
(иконки, подробности, плитка). Позволяет отображать элементы с подэлементами,
а также использовать возможности сортировки и фильтрации (но редактирование
ограничено).
DataGridView 
Табличное представление данных с поддержкой привязки данных, сортировки,
фильтрации и встроенного редактирования ячеек.
PictureBox 
Элемент для отображения изображений. Поддерживает различные форматы,
позволяет масштабировать или изменять размер изображения в соответствии 

с настройками.
Panel 

Контейнер для других элементов управления, позволяющий группировать
связанные элементы и управлять их компоновкой. Может использоваться для
создания сложных макетов или динамического отображения/скрытия групп
элементов.

9

Лабораторная работа №2
Основные элементы Windows Forms
Panel 
Контейнер для других элементов управления, позволяющий группировать
связанные элементы и управлять их компоновкой. Может использоваться для
создания сложных макетов или динамического отображения/скрытия групп
элементов.
GroupBox 
Контейнер с рамкой и заголовком, предназначенный для группировки элементов
управления, которые логически связаны между собой. Улучшает визуальную
организацию интерфейса.
MenuStrip 
Панель меню, располагаемая обычно в верхней части формы. Позволяет создавать
выпадающие меню (например, Файл, Правка, Вид и т.д.) для доступа к командам
приложения.
ToolStrip 
Панель инструментов, содержащая кнопки, текстовые поля, комбобоксы и другие
элементы, предназначенные для быстрого доступа к функциям приложения.
StatusStrip 
Элемент, располагаемый в нижней части формы, для отображения статусной
информации (например, индикаторы, сообщения, время работы).
TabControl 
Элемент, позволяющий создавать вкладки для организации контента в пределах
одного окна. Удобен для разделения функциональности на логически связанные
секции.

10

Лабораторная работа №2
Шаг 2. Создание формы
Для примера будет разработана форма содержащая
следующие элементы:
1 DatagridView - для добавления элементов и отображения их в табличном виде
2 Button - для добавления элементов, удаления, и поиска
3 TextBox - для ввода необходимых данных при добавлении элемента или
поиске
4 PictureBox - для добавления изображения
6 Panel - для группировки элементов, создания “вкладок”
7 Label - для подписи элементов

11

Лабораторная работа №2
Шаг 2. Создание и настройка формы
Необходимо разместить соответствующие элементы на форме (пока что
схематично). Пример формы изображен на рисунке 2.1.

Рисунок 2.1 Пример оформления формы

12

Лабораторная работа №2
Шаг 2. Создание и настройка формы
Возращаясь к настройке внешнего вида формы необходимо рассмотреть свойства
элементов формы. В правом нижнем углу в проекте можно увидеть окно свойств
элемента. Рассмотрим основные свойства, настройка которых потребуется для
создания интуитивного и понятного интерфейса, а также изменения внешнего
вида элементов.
В верхней части панели есть кнопки для сортировки и перехода по разделам
(свойства, эффекты). Для того, чтобы быстрее найти нужное свойство можно
выбрать сортировку “по категориям”.
Для того, чтобы изменить название элемента в коде (при обращении к нему,
вызове метода) используется свойство (Name). Его можно найти в разделе
“Design” (“Разработка”) (Рисунок 2.2).
2 варианта сортировки

Рисунок 2.2 Свойство Name

Подробно про свойства можно почитать по ссылке: 

https://metanit.com/sharp/windowsforms/2.2.php

13

Лабораторная работа №2
Шаг 2. Создание и настройка формы
Для того, чтобы изменить текст, отображаемый на элементе, необходимо указать
новое название в свойстве “Text” в разделе “Внешний вид” (Рисунок 2.3)

Рисунок 2.3 Свойство Text
Также можно использовать своство PlaceholderText, чтобы изменить текст,
отображаемый на элементе. Свойство находится в разделе “Misc” (Рисунок 2.4).
Данное свойство доступно при создании проекта Майкрософт

Рисунок 2.4 Свойство Placeholder

14

Лабораторная работа №2
Шаг 2. Создание и настройка формы
Также необходимо настроить внещний вид элемента TextBox. Для того,
чтобы изменить высоту TextBox, необходимо изменить значение
праметра Multiline на True (Рисунок 2.5)

Рисунок 2.5 Свойство Multiline
Для изменения фонового цвета используется свойство BackColor, а для
изменения цвета текста - ForeColor (Рисунок 2.6)

Рисунок 2.6 Свойства для изменения цвета

15

Лабораторная работа №2
Шаг 2. Создание и настройка формы
Применив необходимые изменения, получим форму, изображенную
на рисунке 2.7

Рисунок 2.7 Пример стилизованной формы
Стилизация интерфейса на ваше усмотрение*

16

Лабораторная работа №2
Шаг 2. Создание и настройка формы
Важно учесть расположение форм, которые в данном случае находятся друг над
другом. Расположение панелей на форме указано на рисунке 2.8.

Рисунок 2.8 Структура формы
Также для более детального рассмотрения и управления положением элементов на
форме можно воспользоваться окном “Структура документа” (Вид → Другие окна →
Структура документа ), для этого нужно открыть в файл с самой формой (Form.cs).
Структура документа изображена на рисунке 2.9

17

Лабораторная работа №2
Шаг 2. Создание и настройка формы

Окно формы
Кнопка закрытия окна
Кнопка поиска
Кнопка сохранения
Кнопка загрузки
Панель компонентов
Иконка поиска
Текстовое поле (“Название”)
Label (“Название”)
Текстовое поле (“Название”)
Label (“Название”)
Текстовое поле (“Название”)
Label (“Название”)
Кнопка удаления строки
Кнопка добавления данных
Поле для поиска
Таблица

Панель меню
Кнопка панели “Компоненты”
Кнопка панели “Видеокарты”
Кнопка панели “Процессоры”
Кнопка панели “Оперативная
память”

Рисунок 2.9 Структура формы
Также для более детального рассмотрения и управления положением элементов на
форме можно воспользоваться окном “Структура документа” (Вид → Другие окна →
Структура документа ), для этого нужно открыть в файл с самой формой (Form.cs).
Структура документа изображена на рисунке 2.9

18

Лабораторная работа №2
Шаг 3. Добавление классов
Далее необходимо в Решении создать папку и добавить туда классы из
лабораторной 1 (Рисунок 3.1)

Рисунок 3.1 Создание классов для работы с данными в форме
В каждом классе необходимо наличие 3 свойств, конструктора без параметров
(нужен для сериализации) и конструктора с параметрами (Рисунок 3.2).

19

Лабораторная работа №2
Шаг 3. Добавление классов

Рисунок 3.2 Пример структуры класса

20

Лабораторная работа №2
Шаг 4. Реализация добавления данных в таблицу
После добавления классов необходимо настроить обработчики событий.
В WinForms у элементов управления (кнопок, чекбоксов, текстовых полей и т. д.) есть
события (events), которые вызываются при определенных действиях пользователя.
Например, клик по кнопке является одним из событий и при настройке появляется 

в окне свойств (Рисунок 4.1)

Рисунок 4.1 Добавление событий
Если настраиваемое событие не отрабатывает, необходимо проверить панель
свойств на наличие события в данном разделе.

21

Лабораторная работа №2
Шаг 4. Реализация добавления данных в таблицу
Далее необходимо добавить событие нажатия на кнопку добавления данных в
таблицу. Пример метода для добавления данных в форму представлен на рисунке 4.2

Рисунок 4.2 - Метод добавления данных в форму

22

Лабораторная работа №2
Шаг 4. Реализация добавления данных в таблицу
Также необходимо после добавления данных обновить данные в таблице
(datagridciew) (Рисунок 4.3)

Рисунок 4.3 - Метод обновления Datagridview
Можно также добавить событие удаления элемента (строки) из таблицы (Рисунок 4.4)

23

Лабораторная работа №2
Шаг 4. Реализация добавления данных в таблицу

Рисунок 4.4 - Метод удаления строки из Datagridview

Для добавления данных в заранее созданные поля, необходимо связать название
поля с свойствами создаваемого объекта (Рисунок 4.5)

Рисунок 4.5 - Добавления данных в столбцы datagridview без автогенерации

24

Лабораторная работа №2
Шаг 4. Реализация добавления данных в таблицу
Важно при работе с панелями динамически скрывать и делать их видимыми
при выборе соответствующей вкладки. Для этого необходимо создать метод,
который будет менять свойство Visible у соответсвущей панели при нажатии на
кнопку (Рисунок 4.6)

Рисунок 4.6 Метод скрытия панелей

25

Лабораторная работа №2
Шаг 5. Реализация фильтрации (поиска) данных
Для поиска нужных данных в таблице использует поиск по подстроке в каждом
столбце.

Рисунок 5.1 Метод фильтрации (поиска) данных в таблице

26

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML
Сериализация — это процесс преобразования объекта в поток байтов для его
сохранения в файле, передаче по сети или хранении в базе данных. Впоследствии
этот объект можно восстановить (десериализовать).

Типы сериализации в C#

В C# есть несколько типов сериализации
Binary (Бинарная) — сериализация в двоичный формат (быстро, но неудобно для
чтения)
XML (Текстовая) — сохраняет объект в формате XML (читаемый формат, но
объемный)
JSON (Современный стандарт) — сериализация в JSON (удобно для веба,
поддерживается большинством языков)
Custom (Кастомная) — своя реализация, например, в CSV.
В данном случае будет рассмотрена XML-сериализация
XML (Extensible Markup Language) — это читаемый человеком формат, используемый
для хранения структурированных данных. 
В C# для работы с XML используется класс XmlSerializer из пространства имен
System.Xml.Serialization.
Пример метода сериализации с использованием List приведен на рисунке 6.1

27

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML

Рисунок 6.1 Пример метода сериализации классов

28

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML
Объяснение ключевых моменто
SaveFileDialog
Используется для взаимодействия с пользователем, чтобы выбрать место и имя
файла. Filter ограничивает выбор XML-файлами, но позволяет выбрать "все
файлы" (*.*)
XmlSerializer
Инструмент для преобразования объектов C# (в данном случае списков List<T>)
в XML-формат и обратно. Он требует, чтобы классы (Component, GraphicsCard,
Processor) имели публичные свойства и пустой конструктор
using (TextWriter ...)
Обеспечивает корректное закрытие файла после записи, даже если произойдёт
ошибка
Проверка на пустой список
Перед сериализацией проверяется Count, чтобы не создавать пустой XML-файл
Условные ветви (if-else)
Код определяет, какой список сериализовать, основываясь на активном
DataGridView. Это позволяет сохранять данные только для текущей вкладки.

29

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML
Также можно использовать сериализацию данных с помощью DataTable, не используя
списки List (Рисунок 6.2)

Рисунок 6.2 Пример сериализации данных с помощью DataTable

30

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML
Десериализация — это процесс обратного преобразования, то есть восстановления
объекта из сохраненного состояния (Рисунок 6.3)

Рисунок 6.3 Пример метода десериализации

31

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML
Разбор метода сериализации

Рисунок 6.4 Метод десериализации с параметром
Метод принимает параметр dgv типа DataGridView, чтобы знать, в какой
DataGridView нужно загрузить данные (например, dataGridView4 для
процессоров, dataGridView1 для компонентов или dataGridView2 для видеокарт).

Такой подход делает метод универсальным — он может работать с любым
DataGridView, а не с конкретным. Это удобно, если у вас несколько таблиц
(dataGridView1, dataGridView2, dataGridView4), и вы хотите переиспользовать код.
(Рисунок 6.4)

Рисунок 6.5 Объект OpenFileDialog
Создаётся объект OpenFileDialog для выбора файла пользователем. Свойство Filter
задаёт фильтр файлов, чтобы в диалоге отображались только XML-файлы по
умолчанию, но с возможностью выбрать "все файлы".

Фильтр упрощает пользователю выбор нужного файла, показывая только файлы 

с расширением .xml.  

Формат фильтра "XML Files (*.xml)|*.xml|All Files (*.*)|*.*" — это стандартный
синтаксис для OpenFileDialog. Первая часть (XML Files (*.xml)) — это описание,
вторая (*.xml) — маска файлов. Аналогично для "All Files". (Рисунок 6.5)

32

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML

Рисунок 6.6 Выбор файла и проверка на корректную таблицу
Метод ShowDialog() (Рисунок 6.6) открывает диалоговое окно выбора файла. Если
пользователь выбрал файл и нажал "Открыть", возвращается DialogResult.OK. Если
пользователь нажал "Отмена", метод завершится, ничего не делая.
string filePath = openFileDialog.FileName;

Свойство FileName возвращает полный путь к выбранному файлу (например, "C:
\data.xml"). Этот путь нужен для чтения данных из файла. Без пути не получится
открыть файл для десериализации.
if (dgv == null) 
{ 
MessageBox.Show("Передан некорректный DataGridView для загрузки данных."); 
return; 
}

Проверяется, что переданный DataGridView (dgv) не равен null. Если dgv равен null,
дальнейшая работа с ним вызовет исключение NullReferenceException. Эта проверка
защищает от таких ошибок.

33

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML

Рисунок 6.7 Сериализация XML
Далее рассмотрим объект XMlSerializer, позволяющий сохранять данные из таблицы
в формате XML (Рисунок 6.7)

Если переданный DataGridView — это dataGridView1 (для компонентов), данные
загружаются в componentList
XmlSerializer serializer = new XmlSerializer(typeof(List<Component>))
Создаётся объект XmlSerializer для типа List<Component>. XmlSerializer
знает, как преобразовать XML в список объектов Component
typeof(List<Component>) указывает, что ожидается XML-файл, содержащий
список объектов Component
using (TextReader reader = new StreamReader(filePath)
StreamReader открывает файл по пути filePath для чтения текста
Конструкция using гарантирует, что поток (StreamReader) будет закрыт после
использования, даже если произойдёт исключение
componentList = (List<Component>)serializer.Deserialize(reader)
Метод Deserialize читает XML из потока и преобразует его в объект типа
List<Component>
Приведение (List<Component>) необходимо, так как Deserialize возвращает
объект типа object
filteredComponentList = null
Сбрасывается фильтр, чтобы после загрузки отображался полный список
компонентов, а не отфильтрованный.


34

Лабораторная работа №2
Шаг 6. Сериализация, десериализация классов. Сохранение в XML
Этот блок загружает данные из XML-файла в список componentList, который
привязан к dataGridView1. Сброс фильтра (filteredComponentList = null) гарантирует,
что пользователь увидит все загруженные данные.

Почему так: Использование XmlSerializer — это стандартный способ десериализации
XML в .NET. Проверка dgv == dataGridView1 позволяет методу работать с разными
DataGridView и списками.
Также важно связать события кнопок сохранения и загрузки с
соответствующими таблицами (Рисунок 6.8)

Рисунок 6.8 Связь событий и кнопок с помощью Tag

35

Лабораторная работа №2
Дополнительная информация
Обязательно ли указывать атрибут Serializable?
Нет, атрибут [Serializable] не нужен, если используется DataSet / DataTable + XML для
сохранения данных.

Почему Serializable не важен?

Атрибут [Serializable] требуется, если объекты сохраняются с помощью бинарной или
JSON-сериализации (например, BinaryFormatter или JsonSerializer).

НО при использовании DataSet.WriteXml(filePath) не нужно указывать атрибут так как : 
DataSet.WriteXml(filePath) сохраняет данные в XML без необходимости
сериализации класса. 
Работает с таблицами (DataTable), а не с объектами конкретного List.

Когда [Serializable] был бы нужен
Если объекты List сохраняются в файл (например, JSON, Binary, SOAP)
Если используется BinaryFormatter или
JsonConvert.SerializeObject(graphicsCardList).

36

Лабораторная работа №2
Дополнительная информация
Если необходимо добавлять данные в уже созданные ячейки DataGridView, а не
создавать новые строки, небходимо обновлять значения ячеек в существующих
строках. Это можно сделать несколькими способами:

1. Обращение к ячейкам по индексу строки и столбца

В случае, если в DataGridView уже присутствуют строки, можно обновлять данные
так:

// Обновление данных в первой строке (индекс 0) 

dataGridView1.Rows[0].Cells[0].Value = "Новое значение";
dataGridView1.Rows[0].Cells[1].Value = 123;

2. Работа с DataTable (если DataGridView привязан к нему)

Если DataGridView использует DataTable как источник данных:

// Получаем доступ к DataTable 

DataTable dt = (DataTable)dataGridView1.DataSource; // Изменяем данные в нужной
строке и столбце dt.Rows[0]["НазваниеСтолбца"] = "Новое значение";

После этого DataGridView обновится автоматически.

3. Обновление данных через BindingList<T>

Если DataGridView привязан к BindingList<T>, можно менять объект в списке:

// Предположим, нас есть BindingList<MyObject> bindingList[0].SomeProperty =
"Новое значение"; dataGridView1.Refresh(); 

// Принудительно обновляем DataGridView

Важно
Убедись, что строки уже существуют перед обновлением
(dataGridView1.Rows.Count)
Если DataGridView связан с DataTable или BindingList<T>, изменения надо делать
в источнике данных.

37

Лабораторная работа №2
Стилизация интерфейса
Для того, чтобы убрать шапку формы используемую по умолчанию, необходимо
установить значение None у свойства FormBorderStyle в разделе “Внешний вид” 

(Рисунок 6.9)

Рисунок 6.9 Свойство FormBorderStyle
После этого возможность перемещать форму с помощью мыши будет отключена.
Чтобы вернуть возможность перемещения формы необходимо добавить флаги для
реализации перемещения формы, функции для перемещения формы и обработчики
событий нажатия мыши. Также можно стилизовать форму закруглив края с помощью
функции CreateRoundRectRgn.

38

Лабораторная работа №2
Стилизация интерфейса
Флаги для реализации перемещения формы и функции для перемещения формы, 
а также функции для скругления краев формы представлены на рисунке 

(Рисунок 6.10)

Рисунок 6.10 Функции реализации перемещения формы

39

Лабораторная работа №2
Стилизация интерфейса
Обработчики нажатия мыши приведены на рисунке 6.11

Рисунок 6.11 Обработчики движения мыши

40

Лабораторная работа №2
Стилизация интерфейса

Также в примере применяется изменение цвета элементов label, размещенных внутри
groupbox Рисунок 6.12

Рисунок 6.12 Обработчики движения мыши

41

Лабораторная работа №2
Форматирование данных

Для того, чтобы отформатировать данные в форме, например автоматически
приводить стоимость к денежному формату (добавлять пробел, числа после запятой 

и знак валюты) необходимо добавить метод, который будет изменять содержимое
соответствующего столбца (Рисунок 6.13, Рисунок 6.14)

Рисунок 6.13 Форматирование столбца Price

Рисунок 6.14 Метод форматирования строки с стоимостью

42

Лабораторная работа №2
Форматирование данных
А затем вызывать этот метод у каждой таблицы (свойство CellFromatting) Рисунок
6.15

Рисунок 6.15 Вызов метода форматирования

43

Лабораторная работа №2
Интерфейс приложения
Далее представлены примеры интерфеса приложения.
Добавление данных в таблицу Components представлено на рисунке 6.16

Рисунок 6.16 Добавление данных в таблицу компонентов
Удаление осуществляется нажатием на соответствующую строку и затем нажатием
кнопки “Удалить” (Рисунок 6.17)

Рисунок 6.17 Удаление данных из таблицы компонентов

44

Лабораторная работа №2
Интерфейс приложения
Поиск осуществляется путем ввода данных в поле поиска и нажатием кнопки
“Поиск”. Поля поиска в данном случае уникальные для каждой панели (класса),
но кнопка поиска одна. (Рисунок 6.18)

Рисунок 6.18 Добавление данных в таблицу компонентов

45

Лабораторная работа №2
Интерфейс приложения
Поиск осуществляется путем ввода данных в поле поиска и нажатием кнопки
“Поиск”. Поля поиска в данном случае уникальные для каждой панели (класса),
но кнопка поиска одна (Рисунок 6.19)

Рисунок 6.19 Добавление данных в таблицу компонентов

46

Лабораторная работа №2
Интерфейс приложения
Также реализовано добавление данных в таблицы других классов (Рисунок 6.20)

Рисунок 6.20 Добавление данных в таблицу видеокарт

47

